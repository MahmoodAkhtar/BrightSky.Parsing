using BrightSky.Parsing.Xml;
using Pidgin;

namespace BrightSky.Parsing.Tests.Xml;

public class DocumentTokenTests
{
    [Theory]
    [InlineData("<?xml?>", "")]
    [InlineData("<?xml ?>", "")]
    [InlineData("<? xml ?>", "")]
    [InlineData("<?xml abd=\"123\" ?>", "")]
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?>", "")]
    [InlineData("<?xml abd = \"123\" ?>", "")]
    [InlineData("<?xml abd = \"123\" efg = \"546\" ?>", "")]
    [InlineData("<? xml abd=\"123\" ?>", "")]
    [InlineData("<? xml abd=\"123\" efg=\"546\" ?>", "")]
    [InlineData("<? xml abd = \"123\" ?>", "")]
    [InlineData("<? xml abd = \"123\" efg = \"546\" ?>", "")]
    
    [InlineData("<abc></abc>", "")]
    [InlineData("<abc> </abc>", "")]
    [InlineData("<abc>\t</abc>", "")]
    [InlineData("<abc>\r</abc>", "")]
    [InlineData("<abc>\n</abc>", "")]
    [InlineData("<abc>\r\n</abc>", "")]
    [InlineData("<abc> \t\r\n</abc>", "")]
    [InlineData("<abc>xyz</abc>", "")]
    [InlineData("<abc><xyx/></abc>", "")]
    [InlineData("<abc><xyx></xyz></abc>", "")]
    [InlineData("<abc><!----></abc>", "")]
    [InlineData("<abc><!-- xyz --></abc>", "")]
    [InlineData("<abc>\r\n<!--\r\n\txyz \r\n-->\r\n</abc>", "")]
    [InlineData("<abc>\r\n<!--\r\n\txyz \r\n-->\r\nxyz</abc>", "")]
    [InlineData("<abc>\r\n<!--\r\n\txyz \r\n-->\r\n<xyx/></abc>", "")]
    [InlineData("<abc>\r\n<!--\r\n\txyz \r\n-->\r\n<xyx></xyz></abc>", "")]
 
    [InlineData("<abc def=\"123\"></abc>", "")]
    [InlineData("<abc def=\"123\"> </abc>", "")]
    [InlineData("<abc def=\"123\">\t</abc>", "")]
    [InlineData("<abc def=\"123\">\r</abc>", "")]
    [InlineData("<abc def=\"123\">\n</abc>", "")]
    [InlineData("<abc def=\"123\">\r\n</abc>", "")]
    [InlineData("<abc def=\"123\"> \t\r\n</abc>", "")]
    [InlineData("<abc def=\"123\">xyz</abc>", "")]
    [InlineData("<abc def=\"123\"><xyx/></abc>", "")]
    [InlineData("<abc def=\"123\"><xyx></xyz></abc>", "")]
    [InlineData("<abc def=\"123\"><!----></abc>", "")]
    [InlineData("<abc def=\"123\"><!-- xyz --></abc>", "")]
    [InlineData("<abc def=\"123\">\r\n<!--\r\n\txyz \r\n-->\r\n</abc>", "")]
    [InlineData("<abc def=\"123\">\r\n<!--\r\n\txyz \r\n-->\r\nxyz</abc>", "")]
    [InlineData("<abc def=\"123\">\r\n<!--\r\n\txyz \r\n-->\r\n<xyx/></abc>", "")]
    [InlineData("<abc def=\"123\">\r\n<!--\r\n\txyz \r\n-->\r\n<xyx></xyz></abc>", "")]
 
    [InlineData("<abc def=\"123\" ghi=\"456\"></abc>", "")]
    [InlineData("<abc def=\"123\" ghi=\"456\"> </abc>", "")]
    [InlineData("<abc def=\"123\" ghi=\"456\">\t</abc>", "")]
    [InlineData("<abc def=\"123\" ghi=\"456\">\r</abc>", "")]
    [InlineData("<abc def=\"123\" ghi=\"456\">\n</abc>", "")]
    [InlineData("<abc def=\"123\" ghi=\"456\">\r\n</abc>", "")]
    [InlineData("<abc def=\"123\" ghi=\"456\"> \t\r\n</abc>", "")]
    [InlineData("<abc def=\"123\" ghi=\"456\">xyz</abc>", "")]
    [InlineData("<abc def=\"123\" ghi=\"456\"><xyx/></abc>", "")]
    [InlineData("<abc def=\"123\" ghi=\"456\"><xyx></xyz></abc>", "")]
    [InlineData("<abc def=\"123\" ghi=\"456\"><!----></abc>", "")]
    [InlineData("<abc def=\"123\" ghi=\"456\"><!-- xyz --></abc>", "")]
    [InlineData("<abc def=\"123\" ghi=\"456\">\r\n<!--\r\n\txyz \r\n-->\r\n</abc>", "")]
    [InlineData("<abc def=\"123\" ghi=\"456\">\r\n<!--\r\n\txyz \r\n-->\r\nxyz</abc>", "")]
    [InlineData("<abc def=\"123\" ghi=\"456\">\r\n<!--\r\n\txyz \r\n-->\r\n<xyx/></abc>", "")]
    [InlineData("<abc def=\"123\" ghi=\"456\">\r\n<!--\r\n\txyz \r\n-->\r\n<xyx></xyz></abc>", "")]
     
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc></abc>", "")]
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc> </abc>", "")]
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc>\t</abc>", "")]
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc>\r</abc>", "")]
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc>\n</abc>", "")]
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc>\r\n</abc>", "")]
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc> \t\r\n</abc>", "")]
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc>xyz</abc>", "")]
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc><xyx/></abc>", "")]
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc><xyx></xyz></abc>", "")]
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc><!----></abc>", "")]
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc><!-- xyz --></abc>", "")]
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc>\r\n<!--\r\n\txyz \r\n-->\r\n</abc>", "")]
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc>\r\n<!--\r\n\txyz \r\n-->\r\nxyz</abc>", "")]
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc>\r\n<!--\r\n\txyz \r\n-->\r\n<xyx/></abc>", "")]
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc>\r\n<!--\r\n\txyz \r\n-->\r\n<xyx></xyz></abc>", "")]
 
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc def=\"123\"></abc>", "")]
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc def=\"123\"> </abc>", "")]
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc def=\"123\">\t</abc>", "")]
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc def=\"123\">\r</abc>", "")]
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc def=\"123\">\n</abc>", "")]
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc def=\"123\">\r\n</abc>", "")]
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc def=\"123\"> \t\r\n</abc>", "")]
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc def=\"123\">xyz</abc>", "")]
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc def=\"123\"><xyx/></abc>", "")]
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc def=\"123\"><xyx></xyz></abc>", "")]
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc def=\"123\"><!----></abc>", "")]
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc def=\"123\"><!-- xyz --></abc>", "")]
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc def=\"123\">\r\n<!--\r\n\txyz \r\n-->\r\n</abc>", "")]
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc def=\"123\">\r\n<!--\r\n\txyz \r\n-->\r\nxyz</abc>", "")]
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc def=\"123\">\r\n<!--\r\n\txyz \r\n-->\r\n<xyx/></abc>", "")]
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc def=\"123\">\r\n<!--\r\n\txyz \r\n-->\r\n<xyx></xyz></abc>", "")]
 
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc def=\"123\" ghi=\"456\"></abc>", "")]
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc def=\"123\" ghi=\"456\"> </abc>", "")]
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc def=\"123\" ghi=\"456\">\t</abc>", "")]
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc def=\"123\" ghi=\"456\">\r</abc>", "")]
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc def=\"123\" ghi=\"456\">\n</abc>", "")]
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc def=\"123\" ghi=\"456\">\r\n</abc>", "")]
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc def=\"123\" ghi=\"456\"> \t\r\n</abc>", "")]
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc def=\"123\" ghi=\"456\">xyz</abc>", "")]
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc def=\"123\" ghi=\"456\"><xyx/></abc>", "")]
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc def=\"123\" ghi=\"456\"><xyx></xyz></abc>", "")]
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc def=\"123\" ghi=\"456\"><!----></abc>", "")]
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc def=\"123\" ghi=\"456\"><!-- xyz --></abc>", "")]
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc def=\"123\" ghi=\"456\">\r\n<!--\r\n\txyz \r\n-->\r\n</abc>", "")]
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc def=\"123\" ghi=\"456\">\r\n<!--\r\n\txyz \r\n-->\r\nxyz</abc>", "")]
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc def=\"123\" ghi=\"456\">\r\n<!--\r\n\txyz \r\n-->\r\n<xyx/></abc>", "")]
    [InlineData("<?xml abd=\"123\" efg=\"546\" ?><abc def=\"123\" ghi=\"456\">\r\n<!--\r\n\txyz \r\n-->\r\n<xyx></xyz></abc>", "")]
   public void Parser_ShouldBe_AsExpected(string input, string expected)
   {
        // Action
        var actual = DocumentToken.Parser.ParseOrThrow(input);

        // Assert
        actual.Should().BeOfType<DocumentToken>();
        actual.Value.Should().Be(expected);
   }
}